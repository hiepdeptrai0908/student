import url from "./url.js";

document.addEventListener("DOMContentLoaded", function (e) {
    // L·∫•y c√°c ph·∫ßn t·ª≠ DOM c·∫ßn s·ª≠ d·ª•ng
    const studentCountElement = document.getElementById("student-count");
    const lessonSelectElement = document.getElementById("lesson-select");

    // ƒê·ªãnh nghƒ©a c√°c API endpoint

    const apiGetScore = url + "score-lesson";
    const apiGetMaxLesson = url + "max-lesson";

    let lessonValue = lessonSelectElement.value;

    // H√†m g·ªçi API ƒë·ªÉ l·∫•y b√†i h·ªçc l·ªõn nh·∫•t
    async function getScoreApi() {
        await fetch(apiGetMaxLesson)
            .then((response) => {
                return response.json(); // Chuy·ªÉn ƒë·ªïi ph·∫£n h·ªìi th√†nh JSON
            })
            .then((datas) => {
                lessonValue = datas; // L∆∞u gi√° tr·ªã b√†i h·ªçc l·ªõn nh·∫•t
                lessonSelectElement.value = lessonValue; // C·∫≠p nh·∫≠t gi√° tr·ªã c·ªßa select element
                const data = {
                    classname: "N5 - 08",
                    lesson: lessonValue,
                };
                renderHtml(data); // G·ªçi h√†m renderHtml v·ªõi d·ªØ li·ªáu
            })
            .catch((error) => {
                console.error("L·ªói truy v·∫•n d·ªØ li·ªáu get max lesson:", error);
            });
    }

    // H√†m render HTML d·ª±a tr√™n d·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ API
    async function renderHtml(data) {
        // X√≥a b·∫£ng c≈© n·∫øu c√≥
        const tableWrapper = document.querySelector(".table-wrapper");
        const existingTable = tableWrapper.querySelector("table");
        if (existingTable) {
            tableWrapper.removeChild(existingTable);
        }

        // X√≥a c√°c span con trong c√°c ph·∫ßn t·ª≠ hi·ªÉn th·ªã top score, bottom score, v√† no test
        document
            .querySelectorAll(".rank-item-max span")
            .forEach((span) => span.remove());
        document
            .querySelectorAll(".rank-item-min span")
            .forEach((span) => span.remove());
        document
            .querySelectorAll(".rank-item-no-test span")
            .forEach((span) => span.remove());

        await fetch(apiGetScore, {
            method: "POST", // S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c POST
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(data), // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu th√†nh JSON string
        })
            .then((response) => response.json())
            .then((datas) => {
                // L·ªçc c√°c ƒëi·ªÉm s·ªë kh√¥ng ph·∫£i l√† 0
                const nonZeroScores = datas
                    .filter((item) => item.score > 0) // L·ªçc nh·ªØng ƒëi·ªÉm s·ªë l·ªõn h∆°n 0
                    .map((item) => item.score); // L·∫•y ch·ªâ ƒëi·ªÉm s·ªë

                // T√¨m ƒëi·ªÉm s·ªë nh·ªè nh·∫•t trong s·ªë c√°c ƒëi·ªÉm ƒë√£ l·ªçc
                const minScore = Math.min(...nonZeroScores);
                const maxScore = datas[1].score;
                studentCountElement.innerHTML = datas.length;

                // T·∫°o b·∫£ng m·ªõi
                const table = document.createElement("table");
                table.className = "table table-hover border";
                table.style.width = "100%";

                // T·∫°o h√†ng ti√™u ƒë·ªÅ
                const thead = document.createElement("thead");
                const headerRow = document.createElement("tr");
                headerRow.className = "table-light";

                // Th√™m c√°c ti√™u ƒë·ªÅ c·ªôt v√†o h√†ng ti√™u ƒë·ªÅ
                ["STT", "H·ªç v√† T√™n", "ƒêi·ªÉm", "Sai"].forEach((text) => {
                    const th = document.createElement("th");
                    th.textContent = text;
                    headerRow.appendChild(th);
                });

                thead.appendChild(headerRow);
                table.appendChild(thead);

                // T·∫°o ph·∫ßn th√¢n b·∫£ng
                const tbody = document.createElement("tbody");

                let totalWrong = 0; // Bi·∫øn ƒë·ªÉ t√≠nh t·ªïng s·ªë c√¢u sai

                datas.forEach((data, index) => {
                    ++index;
                    const row = document.createElement("tr");
                    if (index < 10) {
                        index = `0${index}`;
                    }
                    [index, data.name, data.score, data.error].forEach(
                        (cellData) => {
                            const td = document.createElement("td");
                            td.textContent = cellData;
                            row.appendChild(td);
                        }
                    );

                    totalWrong += data.error; // C·ªông th√™m s·ªë c√¢u sai v√†o t·ªïng

                    tbody.appendChild(row);
                });

                // Th√™m h√†ng m·ªõi v√†o cu·ªëi b·∫£ng ƒë·ªÉ hi·ªÉn th·ªã t·ªïng s·ªë c√¢u sai
                const totalRow = document.createElement("tr");
                totalRow.className = "total-row";
                totalRow.innerHTML = `
                    <td colspan="3" style="text-align: right; font-weight: bold;">T·ªïng s·ªë c√¢u sai:</td>
                    <td style="font-weight: bold;">${totalWrong}</td>
                `;
                tbody.appendChild(totalRow);

                table.appendChild(tbody);

                // Th√™m b·∫£ng v√†o div v·ªõi class 'table-wrapper'
                tableWrapper.appendChild(table);

                // Duy·ªát qua d·ªØ li·ªáu v√† th√™m span cho c√°c ƒëi·ªÉm s·ªë kh√°c nhau
                datas.map((data, index) => {
                    // TOP SCORE
                    if ((data.score == maxScore) & (data.score != 0)) {
                        // T·∫°o th·∫ª span m·ªõi
                        const newSpan = document.createElement("span");
                        newSpan.textContent = `„Éª‚ù§Ô∏è ${data.name} (${data.score} ƒë)`;
                        newSpan.className =
                            "rank-item-name rank-item-name__max";

                        // Ch·ªçn ph·∫ßn t·ª≠ c√≥ l·ªõp rank-item-max
                        const rankItemDiv =
                            document.querySelector(".rank-item-max");

                        // Th√™m th·∫ª span m·ªõi v√†o ph·∫ßn t·ª≠ rank-item
                        rankItemDiv.appendChild(newSpan);
                    }

                    // BOTTOM SCORE
                    if (data.score == minScore) {
                        // T·∫°o th·∫ª span m·ªõi
                        const newSpan = document.createElement("span");
                        newSpan.textContent = `„ÉªüÜò ${data.name} (${data.score} ƒë)`;
                        newSpan.className =
                            "rank-item-name rank-item-name__min";

                        // Ch·ªçn ph·∫ßn t·ª≠ c√≥ l·ªõp rank-item-min
                        const rankItemDiv =
                            document.querySelector(".rank-item-min");

                        // Th√™m th·∫ª span m·ªõi v√†o ph·∫ßn t·ª≠ rank-item
                        rankItemDiv.appendChild(newSpan);
                    }

                    // NO TEST
                    if (data.score == 0) {
                        // T·∫°o th·∫ª span m·ªõi
                        const newSpan = document.createElement("span");
                        newSpan.textContent = `„Éª${data.name}`;
                        newSpan.className =
                            "rank-item-name rank-item-name__no-test";

                        // Ch·ªçn ph·∫ßn t·ª≠ c√≥ l·ªõp rank-item-no-test
                        const rankItemDiv =
                            document.querySelector(".rank-item-no-test");

                        // Th√™m th·∫ª span m·ªõi v√†o ph·∫ßn t·ª≠ rank-item
                        rankItemDiv.appendChild(newSpan);
                    }
                });
            });
    }

    // H√†m kh·ªüi ch·∫°y ·ª©ng d·ª•ng
    function app() {
        getScoreApi(); // G·ªçi API ƒë·ªÉ l·∫•y d·ªØ li·ªáu v√† render HTML
    }
    app(); // Ch·∫°y ·ª©ng d·ª•ng
});

// H√†m x·ª≠ l√Ω khi thay ƒë·ªïi b√†i h·ªçc
handleChangeLesson = function (value) {
    const data = {
        classname: "N5 - 08",
        lesson: value,
    };
    renderHtml(data);
};
