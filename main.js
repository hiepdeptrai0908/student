import url from "./url.js";

document.addEventListener("DOMContentLoaded", function () {
    // L·∫•y c√°c ph·∫ßn t·ª≠ DOM c·∫ßn s·ª≠ d·ª•ng
    const studentCountElement = document.getElementById("student-count");
    const lessonSelectElement = document.getElementById("lesson-select");
    const classnameInputElement = document.getElementById("classname-input");
    const scoreCreatedAtElement = document.getElementById("score-created-at");

    // ƒê·ªãnh nghƒ©a c√°c API endpoint
    const apiGetScore = url + "score-lesson";
    const apiGetMaxLesson = url + "max-lesson";

    // L·∫•y gi√° tr·ªã m·∫∑c ƒë·ªãnh c·ªßa b√†i h·ªçc v√† l·ªõp h·ªçc
    let lessonValue = lessonSelectElement.value;
    let classnameValue = classnameInputElement.value;

    // H√†m ƒë·ªãnh d·∫°ng ng√†y th√°ng
    function formatDateTime(dateString) {
        const date = new Date(dateString);

        // M·∫£ng ch·ª©a c√°c t√™n c·ªßa c√°c ng√†y trong tu·∫ßn
        const daysOfWeek = [
            "Ch·ªß Nh·∫≠t",
            "Th·ª© Hai",
            "Th·ª© Ba",
            "Th·ª© T∆∞",
            "Th·ª© NƒÉm",
            "Th·ª© S√°u",
            "Th·ª© B·∫£y",
        ];

        const hours = date.getHours().toString().padStart(2, "0");
        const minutes = date.getMinutes().toString().padStart(2, "0");
        const day = date.getDate().toString().padStart(2, "0");
        const month = (date.getMonth() + 1).toString().padStart(2, "0");
        const year = date.getFullYear();
        const dayOfWeek = daysOfWeek[date.getDay()]; // L·∫•y t√™n ng√†y trong tu·∫ßn t·ª´ m·∫£ng

        return `${hours}:${minutes} ${dayOfWeek}, ng√†y ${day} th√°ng ${month} nƒÉm ${year}`;
    }

    // H√†m g·ªçi API ƒë·ªÉ l·∫•y b√†i h·ªçc l·ªõn nh·∫•t
    async function getScoreApi() {
        try {
            const response = await fetch(
                apiGetMaxLesson + `/${classnameValue}`,
                {
                    method: "GET",
                }
            );
            const datas = await response.json();
            lessonValue = datas;
            lessonSelectElement.value = lessonValue;
            const data = {
                classname: classnameValue,
                lesson: lessonValue,
            };
            renderHtml(data);
        } catch (error) {
            console.error("L·ªói truy v·∫•n d·ªØ li·ªáu get max lesson:", error);
        }
    }

    // H√†m render HTML d·ª±a tr√™n d·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ API
    async function renderHtml(data) {
        // X√≥a b·∫£ng c≈© n·∫øu c√≥
        const tableWrapper = document.querySelector(".table-wrapper");
        const existingTable = tableWrapper.querySelector("table");
        if (existingTable) {
            tableWrapper.removeChild(existingTable);
        }

        // X√≥a c√°c span con trong c√°c ph·∫ßn t·ª≠ hi·ªÉn th·ªã top score, bottom score, v√† no test
        document
            .querySelectorAll(".rank-item-max span")
            .forEach((span) => span.remove());
        document
            .querySelectorAll(".rank-item-min span")
            .forEach((span) => span.remove());
        document
            .querySelectorAll(".rank-item-no-test span")
            .forEach((span) => span.remove());

        try {
            const response = await fetch(apiGetScore, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(data),
            });
            const datas = await response.json();

            // X√°c ƒë·ªãnh th·ªùi gian ƒëi·ªÉm ƒë∆∞·ª£c t·∫°o t·ª´ d·ªØ li·ªáu ƒë·∫ßu ti√™n (ho·∫∑c thay ƒë·ªïi logic n·∫øu c·∫ßn)
            if (datas.length > 0) {
                const createdAt = datas[0].created_at; // L·∫•y gi√° tr·ªã created_at t·ª´ d·ªØ li·ªáu ƒë·∫ßu ti√™n
                scoreCreatedAtElement.textContent = formatDateTime(createdAt);
            } else {
                scoreCreatedAtElement.textContent = "Kh√¥ng c√≥ d·ªØ li·ªáu";
            }

            // L·ªçc c√°c ƒëi·ªÉm s·ªë kh√¥ng ph·∫£i l√† 0
            const nonZeroScores = datas
                .filter((item) => item.score > 0)
                .map((item) => item.score);

            // T√¨m ƒëi·ªÉm s·ªë nh·ªè nh·∫•t v√† l·ªõn nh·∫•t
            const minScore = Math.min(...nonZeroScores);
            const maxScore = Math.max(...nonZeroScores);
            studentCountElement.innerHTML = datas.length;

            // T·∫°o b·∫£ng m·ªõi
            const table = document.createElement("table");
            table.className = "table table-hover border";
            table.style.width = "100%";

            // T·∫°o h√†ng ti√™u ƒë·ªÅ
            const thead = document.createElement("thead");
            const headerRow = document.createElement("tr");
            headerRow.className = "table-light";

            // Th√™m c√°c ti√™u ƒë·ªÅ c·ªôt v√†o h√†ng ti√™u ƒë·ªÅ
            ["STT", "H·ªç v√† T√™n", "ƒêi·ªÉm", "Sai"].forEach((text) => {
                const th = document.createElement("th");
                th.textContent = text;
                headerRow.appendChild(th);
            });

            thead.appendChild(headerRow);
            table.appendChild(thead);

            // T·∫°o ph·∫ßn th√¢n b·∫£ng
            const tbody = document.createElement("tbody");

            let totalWrong = 0;

            datas.forEach((data, index) => {
                const row = document.createElement("tr");
                const rowIndex = index + 1 < 10 ? `0${index + 1}` : index + 1;
                [rowIndex, data.name, data.score, data.error].forEach(
                    (cellData) => {
                        const td = document.createElement("td");
                        td.textContent = cellData;
                        row.appendChild(td);
                    }
                );

                totalWrong += data.error;
                tbody.appendChild(row);
            });

            // Th√™m h√†ng m·ªõi v√†o cu·ªëi b·∫£ng ƒë·ªÉ hi·ªÉn th·ªã t·ªïng s·ªë c√¢u sai
            const totalRow = document.createElement("tr");
            totalRow.className = "total-row";
            totalRow.innerHTML = `
                <td colspan="3" style="text-align: right; font-weight: bold;">T·ªïng s·ªë c√¢u sai:</td>
                <td style="font-weight: bold;">${totalWrong}</td>
            `;
            tbody.appendChild(totalRow);

            table.appendChild(tbody);

            tableWrapper.appendChild(table);

            // Duy·ªát qua d·ªØ li·ªáu v√† th√™m span cho c√°c ƒëi·ªÉm s·ªë kh√°c nhau
            datas.forEach((data) => {
                if (data.score === maxScore && data.score !== 0) {
                    const newSpan = document.createElement("span");
                    newSpan.textContent = `„Éª‚ù§Ô∏è ${data.name} Ôºà ${data.score} ƒëi·ªÉm Ôºâ`;
                    newSpan.className = "rank-item-name rank-item-name__max";
                    document
                        .querySelector(".rank-item-max")
                        .appendChild(newSpan);
                }

                if (data.score === minScore) {
                    const newSpan = document.createElement("span");
                    newSpan.textContent = `„ÉªüÜò ${data.name} Ôºà ${data.score} ƒëi·ªÉm Ôºâ`;
                    newSpan.className = "rank-item-name rank-item-name__min";
                    document
                        .querySelector(".rank-item-min")
                        .appendChild(newSpan);
                }

                if (data.score === 0) {
                    const newSpan = document.createElement("span");
                    newSpan.textContent = `„Éªü§∑‚Äç‚ôÇÔ∏è ${data.name}`;
                    newSpan.className =
                        "rank-item-name rank-item-name__no-test";
                    document
                        .querySelector(".rank-item-no-test")
                        .appendChild(newSpan);
                }
            });

            // Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu
            if (datas.length === 0) {
                const noDataMessage = document.createElement("p");
                noDataMessage.textContent = "No data available";
                noDataMessage.style.textAlign = "center";
                tableWrapper.appendChild(noDataMessage);
            }
        } catch (error) {
            console.error("L·ªói truy v·∫•n d·ªØ li·ªáu:", error);
        }
    }

    // H√†m x·ª≠ l√Ω khi thay ƒë·ªïi b√†i h·ªçc
    function handleChangeLesson() {
        lessonValue = lessonSelectElement.value;
        const data = {
            classname: classnameValue,
            lesson: lessonValue,
        };
        renderHtml(data);
    }

    // H√†m x·ª≠ l√Ω khi thay ƒë·ªïi l·ªõp
    function handleChangeClassname() {
        classnameValue = classnameInputElement.value;
        const data = {
            classname: classnameValue,
            lesson: lessonValue,
        };
        renderHtml(data);
    }

    // Th√™m s·ª± ki·ªán khi thay ƒë·ªïi b√†i h·ªçc
    lessonSelectElement.addEventListener("change", handleChangeLesson);

    // Th√™m s·ª± ki·ªán khi thay ƒë·ªïi l·ªõp
    classnameInputElement.addEventListener("input", handleChangeClassname);

    // G·ªçi API khi t·∫£i trang l·∫ßn ƒë·∫ßu
    getScoreApi();
});
